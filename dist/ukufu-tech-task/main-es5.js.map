{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/core/core.module.ts","webpack:///src/app/core/enums/cardinals.enum.ts","webpack:///src/app/core/enums/commands.enum.ts","webpack:///src/app/core/enums/events.enum.ts","webpack:///src/app/core/material.module.ts","webpack:///src/app/core/models/plateau.ts","webpack:///src/app/core/models/rover.ts","webpack:///src/app/core/services/app.service.ts","webpack:///src/app/core/services/plateau.service.ts","webpack:///src/app/core/services/rover.service.ts","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/plateau/plateau-form/plateau-form.component.ts","webpack:///src/app/plateau/plateau-form/plateau-form.component.html","webpack:///src/app/plateau/plateau.module.ts","webpack:///src/app/rover/rover-form/rover-form.component.ts","webpack:///src/app/rover/rover-form/rover-form.component.html","webpack:///src/app/rover/rover.module.ts","webpack:///src/app/simulation/simulation.component.ts","webpack:///src/app/simulation/simulation.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","roverService","title","rovers","origin","coord","x","y","orientation","commandList","commandInput","initializeApp","plateau","rover","plateauMap","r","createRover","roverList","executeRoverCommands","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","CoreModule","ngModule","Cardinals","Commands","Events","MaterialModules","MaterialModule","Plateau","upperRight","grid","bottomLeft","Object","assign","Rover","data","commandError","Date","now","position","split","cmd","cmdValue","console","log","M","N","E","S","W","toCardinalEnum","pos","degree","AppService","events","AppStarted","providedIn","PlateauService","appService","validatePlateauCoord","next","PlateauCreated","RoverService","plateauService","newRover","offGridCheck","push","index","findIndex","splice","activeRover","nextPosition","prepareCommand","collisionCheck","moveTo","HomeComponent","subscribe","val","goToNextStep","RoversCreated","SimulationReset","stepper","selectedIndex","selected","completed","PlateauFormComponent","fb","controls","required","pattern","form","group","valueChanges","value","setErrors","sameAsOrigin","coords","createPlateau","reset","nextBtnClick","PlateauModule","RoverFormComponent","roverForms","orientationOpts","buildOptions","buildForm","opts","key","isNaN","opt","name","check","offGrid","v","toUpperCase","setValue","emitEvent","ctrl","length","slice","createRoversFromForms","roverData","f","valid","addRoverFormBtnClick","RoverModule","SimulationComponent","simulations","simulationStarted","simulationError","simulationDone","prepareSimulations","map","simulation","result","forEach","s","i","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\n\nconst routes: Routes = [{ path: '', component: HomeComponent }];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Plateau } from './core/models/plateau';\nimport { RoverService } from './core/services/rover.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit {\n  title = 'ukufu-tech-task';\n\n  plateau: Plateau;\n\n  rovers: any[] = [\n    {\n      origin: {\n        coord: { x: 1, y: 2 },\n        orientation: 0,\n      },\n      commandList: ['L', 'M', 'L', 'M', 'L', 'M', 'L', 'M', 'M'],\n      commandInput: 'LMLMLMLMM',\n    },\n    {\n      origin: {\n        coord: { x: 3, y: 3 },\n        orientation: 90,\n      },\n      commandList: ['M', 'M', 'R', 'M', 'M', 'R', 'M', 'R', 'R', 'M'],\n      commandInput: 'MMRMMRMRRM',\n    },\n  ];\n\n  constructor(private roverService: RoverService) {}\n\n  ngOnInit(): void {\n    this.initializeApp();\n  }\n\n  private initializeApp() {\n    // this.addPlateau();\n    // this.addRovers();\n\n    // this.run();\n  }\n\n  addPlateau() {\n    this.plateau = new Plateau({ x: 5, y: 5 });\n  }\n\n  addRovers() {\n    for (let rover of this.rovers) {\n      rover.plateauMap = this.plateau;\n      const r = this.roverService.createRover(rover);\n      r.commandList = rover.commandList;\n    }\n  }\n\n  run() {\n    for (let rover of this.roverService.roverList) {\n      this.roverService.executeRoverCommands(rover);\n    }\n  }\n}\n","<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { CoreModule } from './core/core.module';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HomeComponent } from './home/home.component';\nimport { PlateauModule } from './plateau/plateau.module';\nimport { MaterialModule } from './core/material.module';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { RoverModule } from './rover/rover.module';\nimport { SimulationComponent } from './simulation/simulation.component';\n\n@NgModule({\n  declarations: [AppComponent, HomeComponent, SimulationComponent],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    CoreModule.forRoot(),\n    BrowserAnimationsModule,\n    MaterialModule,\n    FlexLayoutModule,\n    PlateauModule,\n    RoverModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RoverService } from './services/rover.service';\nimport { MaterialModule } from './material.module';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { PlateauService } from './services/plateau.service';\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, MaterialModule, FlexLayoutModule, ReactiveFormsModule, FormsModule],\n  exports: [MaterialModule, FlexLayoutModule, ReactiveFormsModule, FormsModule],\n})\nexport class CoreModule {\n  static forRoot(): ModuleWithProviders<CoreModule> {\n    return {\n      ngModule: CoreModule,\n      providers: [PlateauService, RoverService],\n    };\n  }\n}\n","export enum Cardinals {\n  N = 0,\n  E = 90,\n  S = 180,\n  W = 270,\n}\n","export enum Commands {\n  M = 0,\n  L = -90,\n  R = 90,\n}\n","export enum Events {\n  AppStarted,\n  PlateauCreated,\n  RoversCreated,\n  SimulationReset\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatDividerModule } from '@angular/material/divider';\n\nconst MaterialModules = [\n  MatToolbarModule,\n  MatCardModule,\n  MatButtonModule,\n  MatDialogModule,\n  MatInputModule,\n  MatIconModule,\n  MatFormFieldModule,\n  MatSelectModule,\n  MatStepperModule,\n  MatDividerModule,\n];\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, MaterialModules],\n  exports: [MaterialModules],\n})\nexport class MaterialModule {}\n","import { IPlateau } from '../interfaces/iplateau';\nimport { IGrid } from '../interfaces/igrid';\nimport { ICoord } from '../interfaces/icoord';\n\nexport class Plateau implements IPlateau {\n\n  grid: IGrid = {\n    bottomLeft: {\n      x: 0,\n      y: 0,\n    },\n    upperRight: null,\n  };\n\n  constructor(upperRight: ICoord) {\n    this.grid.upperRight = Object.assign(new Object(), upperRight);\n  }\n}\n","import { IRover } from '../interfaces/irover';\nimport { IPosition } from '../interfaces/iposition';\nimport { Commands } from '../enums/commands.enum';\nimport { Cardinals } from '../enums/cardinals.enum';\n\nexport class Rover implements IRover {\n  id: number;\n\n  origin: IPosition;\n  position: IPosition;\n\n  commandInput: string = '';\n  commandList: string[] = [];\n\n  get x(): number {\n    return this.position.coord.x;\n  }\n\n  get y(): number {\n    return this.position.coord.y;\n  }\n\n  get orientation(): string {\n    return Cardinals[this.position.orientation];\n  }\n\n  commandError: string = null;\n\n  constructor(data: IRover) {\n    this.id = +Date.now();\n    this.origin = data.origin;\n    this.position = { ...data.origin };\n    this.commandInput = data.commandInput;\n    this.commandList = this.commandInput.split('');\n  }\n\n  public prepareCommand(cmd: string): IPosition {\n\n    // Prepare command to be executed\n    // Return nextPosition of rover\n\n    const cmdValue = Commands[cmd];\n\n    console.log('cmdValue', cmdValue);\n\n    if (cmdValue === Commands.M) {\n      switch (this.position.orientation) {\n        case Cardinals.N:\n          return {\n            coord: { x: this.x, y: this.y + 1 },\n            orientation: this.position.orientation,\n          };\n        case Cardinals.E:\n          return {\n            coord: { x: this.x + 1, y: this.y },\n            orientation: this.position.orientation,\n          };\n        case Cardinals.S:\n          return {\n            coord: { x: this.x, y: this.y - 1 },\n            orientation: this.position.orientation,\n          };\n        case Cardinals.W:\n          return {\n            coord: { x: this.x - 1, y: this.y },\n            orientation: this.position.orientation,\n          };\n      }\n    } else {\n      const position = { ...this.position };\n      position.orientation = this.toCardinalEnum(position.orientation + cmdValue);\n      return position;\n    }\n  }\n\n  public moveTo(pos: IPosition) {\n    // Move to newPosition after checks in Service\n\n    console.log('moveTo', pos);\n    this.position = pos;\n  }\n\n  private toCardinalEnum(degree: number) {\n    if (degree < 0) {\n      return degree + 360;\n    } else if (degree >= 360) {\n      return degree - 360;\n    } else {\n      return degree;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Events } from '../enums/events.enum';\nimport { ICoord } from '../interfaces/icoord';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AppService {\n  events: BehaviorSubject<Events> = new BehaviorSubject(Events.AppStarted);\n\n  constructor() {}\n}\n","import { Injectable } from '@angular/core';\nimport { Plateau } from '../models/plateau';\nimport { IPosition } from '../interfaces/iposition';\nimport { BehaviorSubject } from 'rxjs';\nimport { ICoord } from '../interfaces/icoord';\nimport { AppService } from './app.service';\nimport { Events } from '../enums/events.enum';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PlateauService {\n  plateau = null;\n\n  constructor(private appService: AppService) {}\n\n  public createPlateau(coord: ICoord): Plateau {\n    if (this.validatePlateauCoord(coord)) {\n      this.plateau = new Plateau(coord);\n      this.appService.events.next(Events.PlateauCreated);\n      return this.plateau;\n    } else {\n      return null;\n    }\n  }\n\n  public validatePlateauCoord(coord: ICoord) {\n    if (coord.x < 0 || coord.y < 0) {\n      return false;\n    } else if (coord.x === 0 && coord.y === 0) {\n      return false\n    }else{\n      return true;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Commands } from '../enums/commands.enum';\nimport { Rover } from '../models/rover';\nimport { IPosition } from '../interfaces/iposition';\nimport { IRover } from '../interfaces/irover';\nimport { ICoord } from '../interfaces/icoord';\nimport { PlateauService } from './plateau.service';\nimport { AppService } from './app.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RoverService {\n  activeRover: Rover;\n  roverList: Rover[] = [];\n\n  public get events() {\n    return this.appService.events;\n  }\n\n  public get plateau() {\n    return this.plateauService.plateau;\n  }\n\n  constructor(private appService: AppService, private plateauService: PlateauService) {}\n\n  public createRover(rover: IRover): Rover {\n    const newRover = new Rover(rover);\n    if (!this.offGridCheck(newRover.origin.coord)) return null;\n\n    this.roverList.push(newRover);\n    console.log('roverCreated', newRover);\n    return newRover;\n  }\n\n  public removeRover(id: number) {\n    const index = this.roverList.findIndex((x) => x.id === id);\n\n    if (index >= 0) {\n      this.roverList.splice(index, 1);\n    }\n  }\n\n  public executeRoverCommands(rover: Rover): boolean {\n    //Set as active rover\n    this.activeRover = rover;\n    console.log(rover);\n\n    for (let cmd of rover.commandList) {\n      // Prepare command to be executed;\n      const nextPosition: IPosition = rover.prepareCommand(cmd);\n      console.log('nextPosition', nextPosition);\n\n      if (Commands[cmd] === Commands.M) {\n        // If its a movement command, check if the Rover will stay whitin borders\n        // or if it'll collide with another rover\n\n        if (!this.offGridCheck(nextPosition.coord)) {\n          rover.commandError = \"Command error: Can't move offgrid.\";\n          return false;\n        }\n\n        if (!this.collisionCheck(nextPosition.coord)) {\n          rover.commandError = \"Command error: Can't move, collision ahead.\";\n          return false;\n        }\n      }\n\n      // Execute command\n      rover.moveTo(nextPosition);\n    }\n    console.log(`Rover[${rover.id}] commands finished executing.`);\n    return true;\n  }\n\n  public offGridCheck(coord: ICoord) {\n    // Check if Rover will be inside the plateau border\n    // true if clear to move\n\n    const plateau = this.plateauService.plateau;\n\n    if (\n      plateau.grid.bottomLeft.x > coord.x ||\n      plateau.grid.bottomLeft.y > coord.y ||\n      plateau.grid.upperRight.x < coord.x ||\n      plateau.grid.upperRight.y < coord.y\n    ) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  public collisionCheck(coord: ICoord) {\n    // Check if Rover will collide with another rover\n    // true if clear to move\n\n    return this.roverList.findIndex((rover) => rover.position.coord.x === coord.x && rover.position.coord.y === coord.y) < 0;\n  }\n}\n","import { Component, OnInit, ViewChild, AfterViewInit } from '@angular/core';\nimport { MatStepper } from '@angular/material/stepper';\nimport { AppService } from '../core/services/app.service';\nimport { Events } from '../core/enums/events.enum';\nimport { PlateauFormComponent } from '../plateau/plateau-form/plateau-form.component';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'],\n})\nexport class HomeComponent implements OnInit, AfterViewInit {\n  @ViewChild('stepper') stepper: MatStepper;\n  @ViewChild('plateauForm') plateauForm: PlateauFormComponent;\n\n  constructor(private appService: AppService) {}\n\n  ngAfterViewInit(): void {}\n\n  ngOnInit(): void {\n\n    // Observe app events to move throught the stepper\n    \n    this.appService.events.subscribe((val) => {\n      switch (val) {\n        case Events.PlateauCreated:\n          this.goToNextStep();\n          break;\n        case Events.RoversCreated:\n          this.goToNextStep();\n          break;\n        case Events.SimulationReset:\n          this.stepper.selectedIndex = 0;\n          break;\n      }\n    });\n  }\n\n  goToNextStep() {\n    this.stepper.selected.completed = true;\n    this.stepper.next();\n  }\n}\n","<div fxFlex fxLayout=\"column\" fxLayoutGap=\"10px\">\n    <mat-toolbar color=\"primary\">\n        <span> Ukufu Tech Task</span>\n    </mat-toolbar>\n    <div class=\"page-container\" fxFlex=\"100\" fxLayout=\"row\" fxLayoutAlign=\"center start\">\n        <mat-card fxFlex=\"50\">\n            <mat-card-header>\n                <mat-card-title>NASA Exploration Mission Simulator</mat-card-title>\n                <mat-card-subtitle>Complete simulation settings to see result</mat-card-subtitle>\n            </mat-card-header>\n            <mat-card-content>\n                <mat-horizontal-stepper [linear]=\"true\" #stepper>\n                    <mat-step [completed]=\"false\" [editable]=\"true\">\n                        <ng-template matStepLabel>Plateau</ng-template>\n                        <app-plateau-form #plateauForm></app-plateau-form>\n                    </mat-step>\n                    <mat-step [editable]=\"true\">\n                        <ng-template matStepLabel>Rovers</ng-template>\n                        <app-rover-form #roverForm></app-rover-form>\n                    </mat-step>\n                    <mat-step>\n                        <ng-template matStepLabel>Simulation</ng-template>\n                        <app-simulation></app-simulation>\n                    </mat-step>\n                </mat-horizontal-stepper>\n            </mat-card-content>\n        </mat-card>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { PlateauService } from '../../core/services/plateau.service';\nimport { Plateau } from '../../core/models/plateau';\nimport { ICoord } from '../../core/interfaces/icoord';\n\n@Component({\n  selector: 'app-plateau-form',\n  templateUrl: './plateau-form.component.html',\n  styleUrls: ['./plateau-form.component.scss'],\n})\nexport class PlateauFormComponent implements OnInit {\n  form: FormGroup;\n  controls = {\n    x: new FormControl(null, [Validators.required, Validators.pattern('^[0-9]*$')]),\n    y: new FormControl(null, [Validators.required, Validators.pattern('^[0-9]*$')]),\n  };\n\n  constructor(private fb: FormBuilder, private plateauService: PlateauService) {\n    this.form = this.fb.group(this.controls);\n  }\n\n  ngOnInit(): void {\n\n    // Form validation observer\n    this.form.valueChanges.subscribe((value) => {\n      if (value.x === '0' && value.y === '0') {\n        this.form.setErrors({ sameAsOrigin: true });\n      } else {\n        this.form.setErrors(null);\n      }\n    });\n  }\n\n  nextBtnClick() {\n    //Create ICoord object\n    const { x, y } = this.form.value;\n    const coords: ICoord = {\n      x: +x,\n      y: +y,\n    };\n\n    const plateau: Plateau = this.plateauService.createPlateau(coords);\n\n    if (!plateau) this.form.reset();\n  }\n}\n","<div fxFlex fxLayout=\"column\">\n    <p class=\"mat-body-2\">To create a plateau for the rovers navigation, input the grid coordinates below.<br>\n        Lower left coordinates are locked at (0,0).\n    </p>\n    <form [formGroup]=\"form\">\n        <p class=\"mat-title\">Grid coordinates</p>\n        <div fxLayout=\"row\" fxLayoutGap=\"30px\">\n            <div fxLayout=\"column\">\n                <p class=\"mat-caption\">Lower Left:</p>\n                <div fxLayout=\"row\" fxLayoutGap=\"5px\">\n                    <mat-form-field>\n                        <span matPrefix>(</span>\n                        <input disabled matInput placeholder=\"x\" [value]=\"0\" readonly>\n                        <span matSuffix>,</span>\n                    </mat-form-field>\n                    <mat-form-field>\n                        <input disabled matInput placeholder=\"y\" [value]=\"0\" readonly>\n                        <span matSuffix>)</span>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div fxLayout=\"column\">\n                <p class=\"mat-caption\">Upper right:</p>\n                <div fxLayout=\"row\" fxLayoutGap=\"5px\">\n                    <mat-form-field>\n                        <span matPrefix>(</span>\n                        <input matInput placeholder=\"x\" type=\"text\" formControlName=\"x\">\n                        <span matSuffix>,</span>\n                    </mat-form-field>\n                    <mat-form-field>\n                        <input matInput placeholder=\"y\" type=\"text\" formControlName=\"y\">\n                        <span matSuffix>)</span>\n                    </mat-form-field>\n                </div>\n                <div class=\"form-error-msg\" *ngIf=\"form.controls['x'].hasError('pattern') || form.controls['y'].hasError('pattern')\">\n                    Only numbers are accepted.\n                </div>\n                <div class=\"form-error-msg\" *ngIf=\"form.hasError('sameAsOrigin')\">\n                    (0, 0) coordinates are invalid.\n                </div>\n            </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutAlign=\"end start\">\n            <button (click)=\"nextBtnClick()\" [disabled]=\"!form.valid\" mat-raised-button color=\"accent\">NEXT</button>\n        </div>\n    </form>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PlateauFormComponent } from './plateau-form/plateau-form.component';\nimport { CoreModule } from '../core/core.module';\n\n@NgModule({\n  declarations: [PlateauFormComponent],\n  imports: [CommonModule, CoreModule.forRoot()],\n  exports: [PlateauFormComponent],\n})\nexport class PlateauModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Cardinals } from '../../core/enums/cardinals.enum';\nimport { RoverService } from '../../core/services/rover.service';\nimport { IRover } from '../../core/interfaces/irover';\nimport { Events } from '../../core/enums/events.enum';\nimport { Plateau } from '../../core/models/plateau';\n\n@Component({\n  selector: 'app-rover-form',\n  templateUrl: './rover-form.component.html',\n  styleUrls: ['./rover-form.component.scss'],\n})\nexport class RoverFormComponent implements OnInit {\n  roverForms: FormGroup[] = [];\n\n  Cardinals = Cardinals;\n\n  orientationOpts: any[] = [];\n\n  get isFormsValid(): boolean {\n    for (let f of this.roverForms) {\n      if (!f.valid) return false;\n    }\n    return true;\n  }\n\n  get plateau(): Plateau {\n    return this.roverService.plateau;\n  }\n\n  constructor(private fb: FormBuilder, private roverService: RoverService) {}\n\n  ngOnInit(): void {\n    this.orientationOpts = this.buildOptions();\n    this.buildForm();\n  }\n\n  buildOptions() {\n    // Create options for select input based on Cardinal Points enum\n\n    const opts = [];\n    for (let key of Object.keys(Cardinals)) {\n      if (isNaN(+key)) {\n        // Make sure to only get string keys\n        const opt = { name: key, value: Cardinals[key] };\n        opts.push(opt);\n      }\n    }\n    return opts;\n  }\n\n  buildForm() {\n    const controls = {\n      x: new FormControl(null, [Validators.required, Validators.pattern('^[0-9]*$')]),\n      y: new FormControl(null, [Validators.required, Validators.pattern('^[0-9]*$')]),\n      orientation: new FormControl(null, [Validators.required]),\n      commandInput: new FormControl('', [Validators.required, Validators.pattern('^[MmLlRr]*$')]),\n    };\n\n    const form = this.fb.group(controls);\n\n    // Observe if origin coordinates of rover are valid\n    form.valueChanges.subscribe((val) => {\n      if (val.x && val.y) {\n        const check = this.roverService.offGridCheck({ x: +val.x, y: +val.y });\n        console.log('check off grid', check);\n        if (!check) {\n          form.setErrors({ offGrid: true });\n        } else {\n          form.setErrors(null);\n        }\n      }\n    });\n\n    // Set command input to uppercase\n    form.controls['commandInput'].valueChanges.subscribe((v: string) => {\n      if (v) {\n        const value = v.toUpperCase();\n        form.controls['commandInput'].setValue(value, { emitEvent: false });\n      }\n    });\n\n    this.roverForms.push(form);\n  }\n\n  addRoverFormBtnClick() {\n    this.buildForm();\n  }\n\n  removeRoverFormBtnClick(index: number) {\n    this.roverForms.splice(index, 1);\n  }\n\n  removeLastCommandBtnClick(index: number) {\n    const ctrl = this.roverForms[index].controls['commandInput'];\n    if (ctrl.value.length) ctrl.setValue(ctrl.value.slice(0, -1));\n  }\n\n  addCommandBtnClick(index: number, cmd: string) {\n    const ctrl = this.roverForms[index].controls['commandInput'];\n    ctrl.setValue(ctrl.value + cmd);\n  }\n\n  nextBtnClick() {\n    // if all rovers created emit event\n    if (this.createRoversFromForms()) {\n      this.roverService.events.next(Events.RoversCreated);\n    }\n  }\n\n  private createRoversFromForms(): boolean {\n    this.roverService.roverList = [];\n\n    for (let form of this.roverForms) {\n      const { x, y, orientation, commandInput } = form.value;\n\n      const roverData: IRover = {\n        origin: { coord: { x: +x, y: +y }, orientation: +orientation },\n        commandInput: commandInput,\n      };\n\n      console.log('roverData', roverData);\n\n      const rover = this.roverService.createRover(roverData);\n      if (!rover) return;\n    }\n    this.roverService.events.next(Events.RoversCreated);\n    return true;\n  }\n}\n","<div fxFlex>\n    <p class=\"mat-body-2\">List of Rovers in this simulation</p>\n    <ng-container *ngFor=\"let f of roverForms; let i = index;\">\n        <div class=\"form-group\">\n            <p class=\"mat-title\">Rover #{{ i + 1 }}</p>\n            <ng-container [ngTemplateOutlet]=\"roverFormTmp\" [ngTemplateOutletContext]=\"{form: f, index: i}\"></ng-container>\n        </div>\n    </ng-container>\n    <div class=\"form-actions\" fxLayout=\"row\" fxLayoutAlign=\"end start\" fxLayoutGap=\"10px\">\n        <button mat-stroked-button (click)=\"addRoverFormBtnClick()\" color=\"primary\">ADD NEW</button>\n        <button mat-raised-button [disabled]=\"!isFormsValid\" color=\"accent\" (click)=\"nextBtnClick()\">NEXT</button>\n    </div>\n</div>\n\n<ng-template #roverFormTmp let-form=\"form\" let-index=\"index\">\n    <div fxLayout=\"column\" fxLayoutGap=\"10px\">\n        <form class=\"rover-form\" [formGroup]=\"form\">\n            <p>Deploy coordinates and orientation</p>\n            <div fxLayout=\"column\" fxLayoutAlign=\"start start\">\n                <div class=\"coord-form-field\" fxLayout=\"row\" fxLayoutGap=\"5px\">\n                    <mat-form-field>\n                        <span matPrefix>(</span>\n                        <input matInput placeholder=\"x\" type=\"text\" formControlName=\"x\" required>\n                        <span matSuffix>,</span>\n                    </mat-form-field>\n                    <mat-form-field>\n                        <input matInput placeholder=\"y\" type=\"text\" formControlName=\"y\" required>\n                        <span matSuffix>)</span>\n                    </mat-form-field>\n                    <mat-form-field fxFlex>\n                        <mat-label>Orientation</mat-label>\n                        <mat-select placeholder=\"N\" formControlName=\"orientation\" required>\n                            <mat-option *ngFor=\"let cardinal of orientationOpts\" [value]=\"cardinal.value\">\n                                {{cardinal.name}}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <span *ngIf=\"form.hasError('offGrid')\" class=\"mat-caption form-error\">Coordinates must be between (0,0) and\n                    ({{ plateau.grid.upperRight.x }}, {{ plateau.grid.upperRight.y }})</span>\n                <div class=\"command-form-field\" fxLayout=\"row\" fxLayoutGap=\"10px\" fxLayoutAlign=\"start baseline\">\n                    <mat-form-field fxFlex>\n                        <input class=\"command-input\" matInput placeholder=\"Command input\" type=\"text\" formControlName=\"commandInput\"\n                            required>\n                    </mat-form-field>\n                    <div fxLayout=\"row\" fxLayoutGap=\"10px\">\n                        <button mat-stroked-button color=\"primary\" (click)=\"removeLastCommandBtnClick(index)\">-</button>\n                        <button mat-stroked-button color=\"primary\" (click)=\"addCommandBtnClick(index, 'M')\">M</button>\n                        <button mat-stroked-button color=\"primary\" (click)=\"addCommandBtnClick(index, 'L')\">L</button>\n                        <button mat-stroked-button color=\"primary\" (click)=\"addCommandBtnClick(index, 'R')\">R</button>\n                    </div>\n                </div>\n                <div>\n                    <span class=\"mat-caption\" [ngClass]=\"[form.controls['commandInput'].hasError('pattern') ? 'form-error' : '']\">Valid\n                        command\n                        inputs: M, L or R</span>\n                </div>\n            </div>\n        </form>\n        <div fxLayout=\"row\">\n            <button mat-stroked-button color=\"warn\" (click)=\"removeRoverFormBtnClick(index)\">REMOVE</button>\n        </div>\n        <mat-divider inset></mat-divider>\n    </div>\n</ng-template>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RoverFormComponent } from './rover-form/rover-form.component';\nimport { CoreModule } from '../core/core.module';\n\n@NgModule({\n  declarations: [RoverFormComponent],\n  imports: [CommonModule, CoreModule.forRoot()],\n  exports: [RoverFormComponent],\n})\nexport class RoverModule {}\n","import { Component, OnInit, AfterViewInit } from '@angular/core';\nimport { Cardinals } from '../core/enums/cardinals.enum';\nimport { RoverService } from '../core/services/rover.service';\nimport { Rover } from '../core/models/rover';\nimport { Events } from '../core/enums/events.enum';\nimport { Plateau } from '../core/models/plateau';\nimport { PlateauService } from '../core/services/plateau.service';\n\n@Component({\n  selector: 'app-simulation',\n  templateUrl: './simulation.component.html',\n  styleUrls: ['./simulation.component.scss'],\n})\nexport class SimulationComponent implements OnInit {\n  simulations: any[] = null;\n\n  Cardinals = Cardinals;\n\n  simulationStarted = false;\n  simulationError = false;\n  simulationDone = false;\n\n  public get plateau(): Plateau {\n    return this.plateauService.plateau;\n  }\n\n  constructor(private plateauService: PlateauService, private roverService: RoverService) {}\n\n  ngOnInit(): void {\n    this.roverService.events.subscribe((val) => {\n      if (val === Events.RoversCreated) {\n        this.prepareSimulations(this.roverService.roverList);\n      }\n    });\n  }\n\n  prepareSimulations(rovers: Rover[]) {\n    this.simulations = rovers.map((rover) => {\n      const simulation = { rover: rover, result: null };\n      return simulation;\n    });\n  }\n\n  runSimulation() {\n    console.log('runSimulation', this.roverService.roverList);\n\n    this.simulationStarted = true;\n    this.simulations.forEach((s, i) => {\n      s.result = this.roverService.executeRoverCommands(s.rover);\n      if (!s.result) this.simulationError = true;\n    });\n\n    this.simulationDone = true;\n  }\n\n  restartSimulation() {\n    this.simulationStarted = false;\n    this.simulationError = false;\n    this.simulationDone = false;\n\n    this.plateauService.plateau = null;\n    this.roverService.roverList = null;\n\n    this.roverService.events.next(Events.SimulationReset);\n  }\n}\n","<div fxFlex fxLayout=\"column\" fxLayoutGap=\"10px\">\n    <div fxLayout=\"row wrap\" fxLayoutGap=\"10px\">\n        <ng-container *ngFor=\"let s of simulations; let index = index;\">\n            <ng-container [ngTemplateOutlet]=\"simulationResult\" [ngTemplateOutletContext]=\"{ rover: s.rover, index: index }\"></ng-container>\n        </ng-container>\n    </div>\n    <div fxLayout=\"row\" fxLayoutAlign=\"end start\">\n        <button *ngIf=\"simulationDone\" mat-stroked-button (click)=\"restartSimulation()\" color=\"warn\">RESET</button>\n        <button *ngIf=\"!simulationStarted\" mat-raised-button (click)=\"runSimulation()\" color=\"accent\">START</button>\n    </div>\n</div>\n\n<ng-template #simulationResult let-rover=\"rover\" let-index=\"index\">\n    <mat-card>\n        <mat-card-header>\n            <mat-card-title>Rover #{{index + 1}}</mat-card-title>\n            <mat-card-subtitle>Results</mat-card-subtitle>\n        </mat-card-header>\n        <mat-card-content>\n            <div fxLayout=\"column\">\n                <div>\n                    <p>\n                        <span class=\"mat-body-2\">Grid input:</span><br>\n                        <span>{{ plateau.grid.upperRight.x }} {{ plateau.grid.upperRight.y }}</span><br>\n                        <span class=\"mat-body-2\">Rover Input:</span><br>\n                        <span>{{ rover.origin.coord.x}} {{ rover.origin.coord.y}} {{ Cardinals[rover.origin.orientation] }}\n                            {{ rover.commandInput }}</span>\n                    </p>\n                </div>\n            </div>\n            <div>\n                <p *ngIf=\"simulations[index].result === null\">\n                    <span class=\"mat-body-2\">Output:</span><br>\n                    <span>Waiting simulation start...</span><br>\n                </p>\n                <p *ngIf=\"simulations[index].result\">\n                    <span class=\"mat-body-2\">Output:</span><br>\n                    <span class=\"cmd-success\">{{ rover.position.coord.x}} {{ rover.position.coord.y}}\n                        {{ Cardinals[rover.origin.orientation] }}</span>\n                </p>\n                <p *ngIf=\"!simulations[index].result && simulations[index].rover.commandError\">\n                    <span class=\"mat-body-2\">Last position:</span><br>\n                    <span>{{ rover.position.coord.x}} {{ rover.position.coord.y}} {{ Cardinals[rover.origin.orientation] }}</span><br>\n                    <span class=\"cmd-error\">{{ simulations[index].rover.commandError }}</span>\n                </p>\n            </div>\n        </mat-card-content>\n    </mat-card>\n</ng-template>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}